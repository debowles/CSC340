package LogIn_signUp;

/*
* The purpose of this class to display the sign up form, save the information
* into the database and give the user the option to choose their preference of
* pets.
* Last updated: 11/4/2020
* Author: Yngrid Corrales
 */
import CSC340.DB.DatabaseConnector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

public class NewUser extends javax.swing.JFrame {

    /* Establishing connection to DatabaseConnector class*/
    Connection con = DatabaseConnector.connectdb();
    PreparedStatement ps = null;

    /**
     * Creates new form NewUser
     */
    public NewUser() {
        initComponents();
        DatabaseConnector.connectdb();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jCheckBoxRabbits = new javax.swing.JCheckBox();
        jCheckBoxCats = new javax.swing.JCheckBox();
        jCheckBoxBirds = new javax.swing.JCheckBox();
        jCheckBoxFish = new javax.swing.JCheckBox();
        jCheckBoxHorses = new javax.swing.JCheckBox();
        jCheckBoxSmallF = new javax.swing.JCheckBox();
        jCheckBoxBarnyard = new javax.swing.JCheckBox();
        userEmail = new javax.swing.JTextField();
        userFN = new javax.swing.JTextField();
        userZip = new javax.swing.JTextField();
        userPhoneNo = new javax.swing.JTextField();
        userLN = new javax.swing.JTextField();
        userPassword = new javax.swing.JPasswordField();
        rePass = new javax.swing.JPasswordField();
        signUpButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        radius = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jCheckBoxDogs = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Email:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("First Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Phone Number:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Last Name:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Password:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Re-Type Password:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Zip Code:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Enter search radius:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Check boxes for desired pets:");

        jCheckBoxRabbits.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jCheckBoxRabbits.setText("Rabbits");
        jCheckBoxRabbits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRabbitsActionPerformed(evt);
            }
        });

        jCheckBoxCats.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jCheckBoxCats.setText("Cats");
        jCheckBoxCats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCatsActionPerformed(evt);
            }
        });

        jCheckBoxBirds.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jCheckBoxBirds.setText("Birds");

        jCheckBoxFish.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jCheckBoxFish.setText("Scales, Fins, and Other");
        jCheckBoxFish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFishActionPerformed(evt);
            }
        });

        jCheckBoxHorses.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jCheckBoxHorses.setText("Horses");
        jCheckBoxHorses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHorsesActionPerformed(evt);
            }
        });

        jCheckBoxSmallF.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jCheckBoxSmallF.setText("Small & Furry");

        jCheckBoxBarnyard.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jCheckBoxBarnyard.setText("Barnyard");

        signUpButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        signUpButton.setText("Sign Up");
        signUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel11.setText("Range from 100-500miles");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jCheckBoxDogs.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jCheckBoxDogs.setText("Dogs");
        jCheckBoxDogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDogsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(signUpButton)
                .addGap(104, 104, 104))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(radius, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userEmail, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userFN, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userPassword, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userZip, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rePass, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userLN, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userPhoneNo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5))
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(56, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxBirds)
                            .addComponent(jCheckBoxHorses)
                            .addComponent(jCheckBoxBarnyard)
                            .addComponent(jCheckBoxSmallF)
                            .addComponent(jCheckBoxRabbits)
                            .addComponent(jLabel10)
                            .addComponent(jCheckBoxDogs)
                            .addComponent(jCheckBoxCats)
                            .addComponent(jCheckBoxFish))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(userEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(3, 3, 3)
                        .addComponent(userPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userLN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(9, 9, 9)
                        .addComponent(rePass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(2, 2, 2)
                .addComponent(radius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addGap(38, 38, 38)
                .addComponent(jLabel10)
                .addGap(11, 11, 11)
                .addComponent(jCheckBoxDogs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxCats)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRabbits)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxBirds)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxFish)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxSmallF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxHorses)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxBarnyard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signUpButton)
                    .addComponent(cancelButton))
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the user clicks on the sign up button, it saves all the data
     * retrieved from the user to the login database
     */
    private void signUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUpButtonActionPerformed
        /* This guards for the user to enter a valid email address */
        String emailRegex = "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$";
        Pattern emailPat = Pattern.compile(emailRegex, Pattern.CASE_INSENSITIVE);
        Matcher matches = emailPat.matcher(userEmail.getText());

        /* Creating strings from the JTextFields created in the JFrame */
        String firstName = userFN.getText();
        String lastName = userLN.getText();
        String email = userEmail.getText();
        String phoneNumber = userPhoneNo.getText();
        String password = String.valueOf(userPassword.getPassword());
        String re_Pass = String.valueOf(rePass.getPassword());
        String zipCode = userZip.getText();
        String searchDistance = radius.getText();
        String animalType = "";

        /* Phone number length */
        int maxLength = 10;

        /* When the user has chosen an "animal" it gets added to the database */
        if (jCheckBoxDogs.isSelected()) {
            animalType = animalType + "Dog ";
        }
        if (jCheckBoxCats.isSelected()) {
            animalType = animalType + "Cat ";
        }
        if (jCheckBoxRabbits.isSelected()) {
            animalType = animalType + "Rabbit ";
        }
        if (jCheckBoxBirds.isSelected()) {
            animalType = animalType + "Bird ";
        }
        if (jCheckBoxFish.isSelected()) {
            animalType = animalType + "Scales, Fins & Other ";
        }
        if (jCheckBoxSmallF.isSelected()) {
            animalType = animalType + "Small & Furry ";
        }
        if (jCheckBoxHorses.isSelected()) {
            animalType = animalType + "Horse ";
        }
        if (jCheckBoxBarnyard.isSelected()) {
            animalType = animalType + "Barnyard ";
        }

        /**
         * Checks each JTextFields in this form to see if it's null and guards
         * against it
         */
        if (firstName.equals("")) {
            JOptionPane.showMessageDialog(null, "No first name added, please add first name.");
        } else if (lastName.equals("")) {
            JOptionPane.showMessageDialog(null, "No last name added, please add last name.");
        } else if (email.equals("")) {
            JOptionPane.showMessageDialog(null, "No email added, please add email address.");
        } else if (userPhoneNo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "No phone number added, please add phone number.");
        } else if (password.equals("")) {
            JOptionPane.showMessageDialog(null, "No password added, please add password.");
        } else if (re_Pass.equals("")) {
            JOptionPane.showMessageDialog(null, "Please type in the password for retype password.");
        } else if (userZip.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "No zipcode added, please add zipcode.");
        } else if (radius.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a search radius.");

            /* If the email address inserted is valid of not */
        } else if (matches.find() == false) {
            JOptionPane.showMessageDialog(null, "Please enter a vaild email address.");

            /* If the user did not input a 10 number phonenumber */
        } else if (Integer.valueOf(userPhoneNo.getText().toString()) > maxLength
                || Integer.valueOf(userPhoneNo.getText().toString()) < maxLength) {
            JOptionPane.showMessageDialog(null, "Please enter a valid phone number.");

            /* If the repassword doesn't equal password then retype*/
        } else if (!password.equals(re_Pass)) {
            JOptionPane.showMessageDialog(null, "Password does not match, retype password.");

            /* Checks to see if zipcode is valid */
        } else if (Integer.valueOf(userZip.getText().toString()) < 12345) {
            JOptionPane.showMessageDialog(null, "Please enter a valid zipcode.");
        } else if (Integer.valueOf(userZip.getText().toString()) > 67890) {
            JOptionPane.showMessageDialog(null, "Please enter a valid zipcode.");

            /* Checks to see if search radius is within bounds */
        } else if (Integer.valueOf(radius.getText().toString()) < 100) {
            JOptionPane.showMessageDialog(null, "Out of bounds, please enter a search radius between 100-500miles");
        } else if (Integer.valueOf(radius.getText().toString()) > 500) {
            JOptionPane.showMessageDialog(null, "Out of bounds, please enter a search radius between 100-500miles");

            /* Checks to see if the user has selected at least on check box*/
        } else if (jCheckBoxFish.isSelected() == false && jCheckBoxBarnyard.isSelected() == false
                && jCheckBoxBirds.isSelected() == false && jCheckBoxCats.isSelected() == false
                && jCheckBoxDogs.isSelected() == false && jCheckBoxHorses.isSelected() == false
                && jCheckBoxRabbits.isSelected() == false && jCheckBoxSmallF.isSelected() == false) {
            JOptionPane.showMessageDialog(null, "Please select at least one option (animal).");

        } else {

            /* Updates the login database objects according to userSignUp table */
            try {
                ps = con.prepareStatement("insert into userSignUp values(?,?,?,?,?,?,?,?)");
                ps.setString(1, firstName);
                ps.setString(2, lastName);
                ps.setString(3, email);
                ps.setString(4, phoneNumber);
                ps.setString(5, password);
                ps.setString(6, zipCode);
                ps.setString(7, searchDistance);
                ps.setString(8, animalType);
                ps.executeUpdate();

                /* If successfully updated display message and SampleDisplay JFrame */
                JOptionPane.showMessageDialog(this, "New user added");
                new SampleDisplay().setVisible(true);

            } catch (SQLException ex) {
                Logger.getLogger(NewUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_signUpButtonActionPerformed
    /* Exits the program*/
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void jCheckBoxFishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFishActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxFishActionPerformed

    private void jCheckBoxRabbitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRabbitsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxRabbitsActionPerformed

    private void jCheckBoxHorsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHorsesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxHorsesActionPerformed

    private void jCheckBoxDogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDogsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxDogsActionPerformed

    private void jCheckBoxCatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxCatsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox jCheckBoxBarnyard;
    private javax.swing.JCheckBox jCheckBoxBirds;
    private javax.swing.JCheckBox jCheckBoxCats;
    private javax.swing.JCheckBox jCheckBoxDogs;
    private javax.swing.JCheckBox jCheckBoxFish;
    private javax.swing.JCheckBox jCheckBoxHorses;
    private javax.swing.JCheckBox jCheckBoxRabbits;
    private javax.swing.JCheckBox jCheckBoxSmallF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField radius;
    private javax.swing.JPasswordField rePass;
    private javax.swing.JButton signUpButton;
    private javax.swing.JTextField userEmail;
    private javax.swing.JTextField userFN;
    private javax.swing.JTextField userLN;
    private javax.swing.JPasswordField userPassword;
    private javax.swing.JTextField userPhoneNo;
    private javax.swing.JTextField userZip;
    // End of variables declaration//GEN-END:variables
}
